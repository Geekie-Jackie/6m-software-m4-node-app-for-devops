# refer to https://github.com/terencegaffudSU/6m-software-m4-node-app-for-devops/blob/main/.circleci/config.ymlcd 

version: 2.1 # specifies the CircleCI configuration version
orbs: # pre-packaged reusable configurations and commands
  node: circleci/node@5.0.1 # orb for Node.js-related tasks
  docker: circleci/docker@2.1.4 # orb for Docker-related tasks
  snyk: snyk/snyk@1.5.0
# define jobs
jobs:
  build: # the 'build' job checks out the source code, installs Node.js packages using npm, and logs the installation process.
    docker:
      - image: cimg/node:16.10 # use a CircleCI-managed Docker image with Node.js 16.10
    steps:
      - checkout # checks out the source code from your version control system (e.g., Git)
      - node/install-packages:
          pkg-manager: npm # install Node.js packages using npm
      - run: |
          echo "Installing dependencies..."
          npm install
  test: # the 'test' job checks out the source code, installs Node.js packages using npm, and runs tests using npm. It is dependent on the build job.
    docker:
      - image: cimg/node:16.10 # Use the same Node.js Docker image for testing
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Running tests..."
          npm run test
  build-and-push: # the 'build-and-push' job sets up a remote Docker environment, checks if Docker is available and configured, builds a Docker image with a specified name and tag, and pushes the image to a Docker registry. It depends on the test job.
    executor: docker/docker # use a Docker executor for this job
    steps:
      - setup_remote_docker # set up a remote Docker environment
      - checkout 
      - docker/check  # check if Docker is available and properly configured
      # - run:
      #     name: Set Docker image tag
      #     command: echo "export DOCKER_IMAGE_TAG=$CIRCLE_TAG" >> $BASH_ENV
            
      # - run:
      #     name: Build Docker Image
      #     command: |
      #       DOCKER_IMAGE_TAG=$CIRCLE_TAG 
      #       docker build --file=./Dockerfile --tag="lohcd/cd_demo_4.6:$DOCKER_IMAGE_TAG" .
      #       docker login -u "$DOCKER_LOGIN" -p "$DOCKER_PASSWORD"
      #       docker push lohcd/cd_demo_4.6:$DOCKER_IMAGE_TAG
     
      - docker/build:  
          image: lohcd/cd_demo_4.6 # define the Docker image name to build
          tag: << pipeline.git.tag >> # this will use the Git tag as the Docker image tag.    

      - docker/push:
          image: lohcd/cd_demo_4.6 # define the Docker image name to push
          tag: << pipeline.git.tag >> # this will use the Git tag as the Docker image tag

# define scan job
  scan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: lohcd/cd_demo_4.6 #the IMAGE_NAME is a variable we could use in our jobs/steps
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME . 
      # $IMAGE_NAME gets the value of the IMAGE_NAME from the environment defined above.
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          severity-threshold: high # Set the severity threshold to filter HIGH and CRITICAL vulnerabilities

    # scan:
    #   docker:
    #     - image: cimg/node:16.10
    #   environment:
    #     IMAGE_NAME: terencegaffudsu/education-space #the IMAGE_NAME is a variable we could use in our jobs/steps
    #   steps:
    #     - checkout
    #     - setup_remote_docker
    #     - docker/check
    #     - run: docker build -t $IMAGE_NAME . 
    #     # $IMAGE_NAME gets the value of the IMAGE_NAME from the environment defined above.
    #     - snyk/scan:
    #       docker-image-name: $IMAGE_NAME      

# define workflows
workflows:
  version: 2
  simple_workflow: # 'simple_workflow' includes the following jobs in a specific sequence.
    jobs:
      - build: 
          filters:
            branches:
              only: main # execute the 'build' job when changes are pushed to the 'main' branch
      - test: 
          requires:
            - build # execute the 'test' job after 'build' is done
          filters:
            branches:
              only: main # execute the 'test' job after the 'build' job when changes are pushed to the 'main' branch
      - build-and-push: # this should run only if a tag is pushed, not if a branch is pushed
          # requires:
          #   - test # execute the 'build-and-push' job after 'test'
          filters:
            tags:
              only: /^v.*/ # only run when a Git tag follows Semantic Versioning (e.g., v1.0.2)
            branches:
              ignore: /.*/ # ignores all branches 
      - scan:
          requires:
            - build
